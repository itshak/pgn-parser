{
  "version": 3,
  "sources": ["../../../../node_modules/chessops/src/san.ts"],
  "sourcesContent": ["import { attacks, bishopAttacks, kingAttacks, knightAttacks, queenAttacks, rookAttacks } from './attacks.js';\nimport { Position } from './chess.js';\nimport { SquareSet } from './squareSet.js';\nimport { CastlingSide, FILE_NAMES, isDrop, Move, RANK_NAMES, SquareName } from './types.js';\nimport { charToRole, defined, makeSquare, opposite, parseSquare, roleToChar, squareFile, squareRank } from './util.js';\n\nconst makeSanWithoutSuffix = (pos: Position, move: Move): string => {\n  let san = '';\n  if (isDrop(move)) {\n    if (move.role !== 'pawn') san = roleToChar(move.role).toUpperCase();\n    san += '@' + makeSquare(move.to);\n  } else {\n    const role = pos.board.getRole(move.from);\n    if (!role) return '--';\n    if (role === 'king' && (pos.board[pos.turn].has(move.to) || Math.abs(move.to - move.from) === 2)) {\n      san = move.to > move.from ? 'O-O' : 'O-O-O';\n    } else {\n      const capture = pos.board.occupied.has(move.to)\n        || (role === 'pawn' && squareFile(move.from) !== squareFile(move.to));\n      if (role !== 'pawn') {\n        san = roleToChar(role).toUpperCase();\n\n        // Disambiguation\n        let others;\n        if (role === 'king') others = kingAttacks(move.to).intersect(pos.board.king);\n        else if (role === 'queen') others = queenAttacks(move.to, pos.board.occupied).intersect(pos.board.queen);\n        else if (role === 'rook') others = rookAttacks(move.to, pos.board.occupied).intersect(pos.board.rook);\n        else if (role === 'bishop') others = bishopAttacks(move.to, pos.board.occupied).intersect(pos.board.bishop);\n        else others = knightAttacks(move.to).intersect(pos.board.knight);\n        others = others.intersect(pos.board[pos.turn]).without(move.from);\n        if (others.nonEmpty()) {\n          const ctx = pos.ctx();\n          for (const from of others) {\n            if (!pos.dests(from, ctx).has(move.to)) others = others.without(from);\n          }\n          if (others.nonEmpty()) {\n            let row = false;\n            let column = others.intersects(SquareSet.fromRank(squareRank(move.from)));\n            if (others.intersects(SquareSet.fromFile(squareFile(move.from)))) row = true;\n            else column = true;\n            if (column) san += FILE_NAMES[squareFile(move.from)];\n            if (row) san += RANK_NAMES[squareRank(move.from)];\n          }\n        }\n      } else if (capture) san = FILE_NAMES[squareFile(move.from)];\n\n      if (capture) san += 'x';\n      san += makeSquare(move.to);\n      if (move.promotion) san += '=' + roleToChar(move.promotion).toUpperCase();\n    }\n  }\n  return san;\n};\n\nexport const makeSanAndPlay = (pos: Position, move: Move): string => {\n  const san = makeSanWithoutSuffix(pos, move);\n  pos.play(move);\n  if (pos.outcome()?.winner) return san + '#';\n  if (pos.isCheck()) return san + '+';\n  return san;\n};\n\nexport const makeSanVariation = (pos: Position, variation: Move[]): string => {\n  pos = pos.clone();\n  const line = [];\n  for (let i = 0; i < variation.length; i++) {\n    if (i !== 0) line.push(' ');\n    if (pos.turn === 'white') line.push(pos.fullmoves, '. ');\n    else if (i === 0) line.push(pos.fullmoves, '... ');\n    const san = makeSanWithoutSuffix(pos, variation[i]);\n    pos.play(variation[i]);\n    line.push(san);\n    if (san === '--') return line.join('');\n    if (i === variation.length - 1 && pos.outcome()?.winner) line.push('#');\n    else if (pos.isCheck()) line.push('+');\n  }\n  return line.join('');\n};\n\nexport const makeSan = (pos: Position, move: Move): string => makeSanAndPlay(pos.clone(), move);\n\nexport const parseSan = (pos: Position, san: string): Move | undefined => {\n  const ctx = pos.ctx();\n\n  // Normal move\n  const match = san.match(/^([NBRQK])?([a-h])?([1-8])?[-x]?([a-h][1-8])(?:=?([nbrqkNBRQK]))?[+#]?$/) as\n    | [\n      string,\n      'N' | 'B' | 'R' | 'Q' | 'K' | undefined,\n      string | undefined,\n      string | undefined,\n      SquareName,\n      'n' | 'b' | 'r' | 'q' | 'k' | 'N' | 'B' | 'R' | 'Q' | 'K' | undefined,\n    ]\n    | null;\n  if (!match) {\n    // Castling\n    let castlingSide: CastlingSide | undefined;\n    if (san === 'O-O' || san === 'O-O+' || san === 'O-O#') castlingSide = 'h';\n    else if (san === 'O-O-O' || san === 'O-O-O+' || san === 'O-O-O#') castlingSide = 'a';\n    if (castlingSide) {\n      const rook = pos.castles.rook[pos.turn][castlingSide];\n      if (!defined(ctx.king) || !defined(rook) || !pos.dests(ctx.king, ctx).has(rook)) return;\n      return {\n        from: ctx.king,\n        to: rook,\n      };\n    }\n\n    // Drop\n    const match = san.match(/^([pnbrqkPNBRQK])?@([a-h][1-8])[+#]?$/) as\n      | [string, 'p' | 'n' | 'b' | 'r' | 'q' | 'k' | 'P' | 'N' | 'B' | 'R' | 'Q' | 'K' | undefined, SquareName]\n      | null;\n    if (!match) return;\n    const move = {\n      role: match[1] ? charToRole(match[1]) : 'pawn',\n      to: parseSquare(match[2]),\n    };\n    return pos.isLegal(move, ctx) ? move : undefined;\n  }\n  const role = match[1] ? charToRole(match[1]) : 'pawn';\n  const to = parseSquare(match[4]);\n\n  const promotion = match[5] ? charToRole(match[5]) : undefined;\n  if (!!promotion !== (role === 'pawn' && SquareSet.backranks().has(to))) return;\n  if (promotion === 'king' && pos.rules !== 'antichess') return;\n\n  let candidates = pos.board.pieces(pos.turn, role);\n  if (role === 'pawn' && !match[2]) candidates = candidates.intersect(SquareSet.fromFile(squareFile(to)));\n  else if (match[2]) candidates = candidates.intersect(SquareSet.fromFile(match[2].charCodeAt(0) - 'a'.charCodeAt(0)));\n  if (match[3]) candidates = candidates.intersect(SquareSet.fromRank(match[3].charCodeAt(0) - '1'.charCodeAt(0)));\n\n  // Optimization: Reduce set of candidates\n  const pawnAdvance = role === 'pawn' ? SquareSet.fromFile(squareFile(to)) : SquareSet.empty();\n  candidates = candidates.intersect(\n    pawnAdvance.union(attacks({ color: opposite(pos.turn), role }, to, pos.board.occupied)),\n  );\n\n  // Check uniqueness and legality\n  let from;\n  for (const candidate of candidates) {\n    if (pos.dests(candidate, ctx).has(to)) {\n      if (defined(from)) return; // Ambiguous\n      from = candidate;\n    }\n  }\n  if (!defined(from)) return; // Illegal\n\n  return {\n    from,\n    to,\n    promotion,\n  };\n};\n"],
  "mappings": "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",
  "names": ["match"]
}
