{
  "version": 3,
  "sources": ["../../../../node_modules/chessops/src/debug.ts", "../../../../node_modules/chessops/src/transform.ts"],
  "sourcesContent": ["import { Board } from './board.js';\nimport { Position } from './chess.js';\nimport { makePiece } from './fen.js';\nimport { SquareSet } from './squareSet.js';\nimport { Piece, Role, ROLES, Square } from './types.js';\nimport { makeSquare, makeUci, opposite, squareRank } from './util.js';\n\nexport const squareSet = (squares: SquareSet): string => {\n  const r = [];\n  for (let y = 7; y >= 0; y--) {\n    for (let x = 0; x < 8; x++) {\n      const square = x + y * 8;\n      r.push(squares.has(square) ? '1' : '.');\n      r.push(x < 7 ? ' ' : '\\n');\n    }\n  }\n  return r.join('');\n};\n\nexport const piece = (piece: Piece): string => makePiece(piece);\n\nexport const board = (board: Board): string => {\n  const r = [];\n  for (let y = 7; y >= 0; y--) {\n    for (let x = 0; x < 8; x++) {\n      const square = x + y * 8;\n      const p = board.get(square);\n      const col = p ? piece(p) : '.';\n      r.push(col);\n      r.push(x < 7 ? (col.length < 2 ? ' ' : '') : '\\n');\n    }\n  }\n  return r.join('');\n};\n\nexport const square = (sq: Square): string => makeSquare(sq);\n\nexport const dests = (dests: Map<Square, SquareSet>): string => {\n  const lines = [];\n  for (const [from, to] of dests) {\n    lines.push(`${makeSquare(from)}: ${Array.from(to, square).join(' ')}`);\n  }\n  return lines.join('\\n');\n};\n\nexport const perft = (pos: Position, depth: number, log = false): number => {\n  if (depth < 1) return 1;\n\n  const promotionRoles: Role[] = ['queen', 'knight', 'rook', 'bishop'];\n  if (pos.rules === 'antichess') promotionRoles.push('king');\n\n  const ctx = pos.ctx();\n  const dropDests = pos.dropDests(ctx);\n\n  if (!log && depth === 1 && dropDests.isEmpty()) {\n    // Optimization for leaf nodes.\n    let nodes = 0;\n    for (const [from, to] of pos.allDests(ctx)) {\n      nodes += to.size();\n      if (pos.board.pawn.has(from)) {\n        const backrank = SquareSet.backrank(opposite(pos.turn));\n        nodes += to.intersect(backrank).size() * (promotionRoles.length - 1);\n      }\n    }\n    return nodes;\n  } else {\n    let nodes = 0;\n    for (const [from, dests] of pos.allDests(ctx)) {\n      const promotions: Array<Role | undefined> =\n        squareRank(from) === (pos.turn === 'white' ? 6 : 1) && pos.board.pawn.has(from) ? promotionRoles : [undefined];\n      for (const to of dests) {\n        for (const promotion of promotions) {\n          const child = pos.clone();\n          const move = { from, to, promotion };\n          child.play(move);\n          const children = perft(child, depth - 1, false);\n          if (log) console.log(makeUci(move), children);\n          nodes += children;\n        }\n      }\n    }\n    if (pos.pockets) {\n      for (const role of ROLES) {\n        if (pos.pockets[pos.turn][role] > 0) {\n          for (const to of role === 'pawn' ? dropDests.diff(SquareSet.backranks()) : dropDests) {\n            const child = pos.clone();\n            const move = { role, to };\n            child.play(move);\n            const children = perft(child, depth - 1, false);\n            if (log) console.log(makeUci(move), children);\n            nodes += children;\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n};\n", "import { Board } from './board.js';\nimport { Setup } from './setup.js';\nimport { SquareSet } from './squareSet.js';\nimport { COLORS, ROLES } from './types.js';\nimport { defined } from './util.js';\n\nexport const flipVertical = (s: SquareSet): SquareSet => s.bswap64();\n\nexport const flipHorizontal = (s: SquareSet): SquareSet => {\n  const k1 = new SquareSet(0x55555555, 0x55555555);\n  const k2 = new SquareSet(0x33333333, 0x33333333);\n  const k4 = new SquareSet(0x0f0f0f0f, 0x0f0f0f0f);\n  s = s.shr64(1).intersect(k1).union(s.intersect(k1).shl64(1));\n  s = s.shr64(2).intersect(k2).union(s.intersect(k2).shl64(2));\n  s = s.shr64(4).intersect(k4).union(s.intersect(k4).shl64(4));\n  return s;\n};\n\nexport const flipDiagonal = (s: SquareSet): SquareSet => {\n  let t = s.xor(s.shl64(28)).intersect(new SquareSet(0, 0x0f0f0f0f));\n  s = s.xor(t.xor(t.shr64(28)));\n  t = s.xor(s.shl64(14)).intersect(new SquareSet(0x33330000, 0x33330000));\n  s = s.xor(t.xor(t.shr64(14)));\n  t = s.xor(s.shl64(7)).intersect(new SquareSet(0x55005500, 0x55005500));\n  s = s.xor(t.xor(t.shr64(7)));\n  return s;\n};\n\nexport const rotate180 = (s: SquareSet): SquareSet => s.rbit64();\n\nexport const transformBoard = (board: Board, f: (s: SquareSet) => SquareSet): Board => {\n  const b = Board.empty();\n  b.occupied = f(board.occupied);\n  b.promoted = f(board.promoted);\n  for (const color of COLORS) b[color] = f(board[color]);\n  for (const role of ROLES) b[role] = f(board[role]);\n  return b;\n};\n\nexport const transformSetup = (setup: Setup, f: (s: SquareSet) => SquareSet): Setup => ({\n  board: transformBoard(setup.board, f),\n  pockets: setup.pockets?.clone(),\n  turn: setup.turn,\n  castlingRights: f(setup.castlingRights),\n  epSquare: defined(setup.epSquare) ? f(SquareSet.fromSquare(setup.epSquare)).first() : undefined,\n  remainingChecks: setup.remainingChecks?.clone(),\n  halfmoves: setup.halfmoves,\n  fullmoves: setup.fullmoves,\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;AAKO,IAAM,YAAY,CAAC,YAA8B;AACtD,QAAM,IAAI,CAAA;AACV,WAAS,IAAI,GAAG,KAAK,GAAG,KAAK;AAC3B,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,YAAMA,UAAS,IAAI,IAAI;AACvB,QAAE,KAAK,QAAQ,IAAIA,OAAM,IAAI,MAAM,GAAG;AACtC,QAAE,KAAK,IAAI,IAAI,MAAM,IAAI;IAC3B;EACF;AACA,SAAO,EAAE,KAAK,EAAE;AAClB;AAEO,IAAM,QAAQ,CAACC,WAAyB,UAAUA,MAAK;AAEvD,IAAM,QAAQ,CAACC,WAAwB;AAC5C,QAAM,IAAI,CAAA;AACV,WAAS,IAAI,GAAG,KAAK,GAAG,KAAK;AAC3B,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,YAAMF,UAAS,IAAI,IAAI;AACvB,YAAM,IAAIE,OAAM,IAAIF,OAAM;AAC1B,YAAM,MAAM,IAAI,MAAM,CAAC,IAAI;AAC3B,QAAE,KAAK,GAAG;AACV,QAAE,KAAK,IAAI,IAAK,IAAI,SAAS,IAAI,MAAM,KAAM,IAAI;IACnD;EACF;AACA,SAAO,EAAE,KAAK,EAAE;AAClB;AAEO,IAAM,SAAS,CAAC,OAAuB,WAAW,EAAE;AAEpD,IAAM,QAAQ,CAACG,WAAyC;AAC7D,QAAM,QAAQ,CAAA;AACd,aAAW,CAAC,MAAM,EAAE,KAAKA,QAAO;AAC9B,UAAM,KAAK,GAAG,WAAW,IAAI,CAAC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,KAAK,GAAG,CAAC,EAAE;EACvE;AACA,SAAO,MAAM,KAAK,IAAI;AACxB;AAEO,IAAM,QAAQ,CAAC,KAAe,OAAe,MAAM,UAAiB;AACzE,MAAI,QAAQ;AAAG,WAAO;AAEtB,QAAM,iBAAyB,CAAC,SAAS,UAAU,QAAQ,QAAQ;AACnE,MAAI,IAAI,UAAU;AAAa,mBAAe,KAAK,MAAM;AAEzD,QAAM,MAAM,IAAI,IAAG;AACnB,QAAM,YAAY,IAAI,UAAU,GAAG;AAEnC,MAAI,CAAC,OAAO,UAAU,KAAK,UAAU,QAAO,GAAI;AAE9C,QAAI,QAAQ;AACZ,eAAW,CAAC,MAAM,EAAE,KAAK,IAAI,SAAS,GAAG,GAAG;AAC1C,eAAS,GAAG,KAAI;AAChB,UAAI,IAAI,MAAM,KAAK,IAAI,IAAI,GAAG;AAC5B,cAAM,WAAW,UAAU,SAAS,SAAS,IAAI,IAAI,CAAC;AACtD,iBAAS,GAAG,UAAU,QAAQ,EAAE,KAAI,KAAM,eAAe,SAAS;MACpE;IACF;AACA,WAAO;EACT,OAAO;AACL,QAAI,QAAQ;AACZ,eAAW,CAAC,MAAMA,MAAK,KAAK,IAAI,SAAS,GAAG,GAAG;AAC7C,YAAM,aACJ,WAAW,IAAI,OAAO,IAAI,SAAS,UAAU,IAAI,MAAM,IAAI,MAAM,KAAK,IAAI,IAAI,IAAI,iBAAiB,CAAC,MAAS;AAC/G,iBAAW,MAAMA,QAAO;AACtB,mBAAW,aAAa,YAAY;AAClC,gBAAM,QAAQ,IAAI,MAAK;AACvB,gBAAM,OAAO,EAAE,MAAM,IAAI,UAAS;AAClC,gBAAM,KAAK,IAAI;AACf,gBAAM,WAAW,MAAM,OAAO,QAAQ,GAAG,KAAK;AAC9C,cAAI;AAAK,oBAAQ,IAAI,QAAQ,IAAI,GAAG,QAAQ;AAC5C,mBAAS;QACX;MACF;IACF;AACA,QAAI,IAAI,SAAS;AACf,iBAAW,QAAQ,OAAO;AACxB,YAAI,IAAI,QAAQ,IAAI,IAAI,EAAE,IAAI,IAAI,GAAG;AACnC,qBAAW,MAAM,SAAS,SAAS,UAAU,KAAK,UAAU,UAAS,CAAE,IAAI,WAAW;AACpF,kBAAM,QAAQ,IAAI,MAAK;AACvB,kBAAM,OAAO,EAAE,MAAM,GAAE;AACvB,kBAAM,KAAK,IAAI;AACf,kBAAM,WAAW,MAAM,OAAO,QAAQ,GAAG,KAAK;AAC9C,gBAAI;AAAK,sBAAQ,IAAI,QAAQ,IAAI,GAAG,QAAQ;AAC5C,qBAAS;UACX;QACF;MACF;IACF;AACA,WAAO;EACT;AACF;;;ACjGA;;;;;;;;;AAMO,IAAM,eAAe,CAAC,MAA4B,EAAE,QAAO;AAE3D,IAAM,iBAAiB,CAAC,MAA2B;AACxD,QAAM,KAAK,IAAI,UAAU,YAAY,UAAU;AAC/C,QAAM,KAAK,IAAI,UAAU,WAAY,SAAU;AAC/C,QAAM,KAAK,IAAI,UAAU,WAAY,SAAU;AAC/C,MAAI,EAAE,MAAM,CAAC,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,MAAM,CAAC,CAAC;AAC3D,MAAI,EAAE,MAAM,CAAC,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,MAAM,CAAC,CAAC;AAC3D,MAAI,EAAE,MAAM,CAAC,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,MAAM,CAAC,CAAC;AAC3D,SAAO;AACT;AAEO,IAAM,eAAe,CAAC,MAA2B;AACtD,MAAI,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,UAAU,IAAI,UAAU,GAAG,SAAU,CAAC;AACjE,MAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;AAC5B,MAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,UAAU,IAAI,UAAU,WAAY,SAAU,CAAC;AACtE,MAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;AAC5B,MAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,EAAE,UAAU,IAAI,UAAU,YAAY,UAAU,CAAC;AACrE,MAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;AAC3B,SAAO;AACT;AAEO,IAAM,YAAY,CAAC,MAA4B,EAAE,OAAM;AAEvD,IAAM,iBAAiB,CAACC,QAAc,MAAyC;AACpF,QAAM,IAAI,MAAM,MAAK;AACrB,IAAE,WAAW,EAAEA,OAAM,QAAQ;AAC7B,IAAE,WAAW,EAAEA,OAAM,QAAQ;AAC7B,aAAW,SAAS;AAAQ,MAAE,KAAK,IAAI,EAAEA,OAAM,KAAK,CAAC;AACrD,aAAW,QAAQ;AAAO,MAAE,IAAI,IAAI,EAAEA,OAAM,IAAI,CAAC;AACjD,SAAO;AACT;AAEO,IAAM,iBAAiB,CAAC,OAAc,MAAyC;;AAAC,SAAC;IACtF,OAAO,eAAe,MAAM,OAAO,CAAC;IACpC,UAAS,KAAA,MAAM,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,MAAK;IAC7B,MAAM,MAAM;IACZ,gBAAgB,EAAE,MAAM,cAAc;IACtC,UAAU,QAAQ,MAAM,QAAQ,IAAI,EAAE,UAAU,WAAW,MAAM,QAAQ,CAAC,EAAE,MAAK,IAAK;IACtF,kBAAiB,KAAA,MAAM,qBAAe,QAAA,OAAA,SAAA,SAAA,GAAE,MAAK;IAC7C,WAAW,MAAM;IACjB,WAAW,MAAM;;;",
  "names": ["square", "piece", "board", "dests", "board"]
}
