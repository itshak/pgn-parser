{
  "version": 3,
  "sources": ["../../../../node_modules/chessops/src/attacks.ts"],
  "sourcesContent": ["/**\n * Compute attacks and rays.\n *\n * These are low-level functions that can be used to implement chess rules.\n *\n * Implementation notes: Sliding attacks are computed using\n * [Hyperbola Quintessence](https://www.chessprogramming.org/Hyperbola_Quintessence).\n * Magic Bitboards would deliver slightly faster lookups, but also require\n * initializing considerably larger attack tables. On the web, initialization\n * time is important, so the chosen method may strike a better balance.\n *\n * @packageDocumentation\n */\n\nimport { SquareSet } from './squareSet.js';\nimport { BySquare, Color, Piece, Square } from './types.js';\nimport { squareFile, squareRank } from './util.js';\n\nconst computeRange = (square: Square, deltas: number[]): SquareSet => {\n  let range = SquareSet.empty();\n  for (const delta of deltas) {\n    const sq = square + delta;\n    if (0 <= sq && sq < 64 && Math.abs(squareFile(square) - squareFile(sq)) <= 2) {\n      range = range.with(sq);\n    }\n  }\n  return range;\n};\n\nconst tabulate = <T>(f: (square: Square) => T): BySquare<T> => {\n  const table = [];\n  for (let square = 0; square < 64; square++) table[square] = f(square);\n  return table;\n};\n\nconst KING_ATTACKS = tabulate(sq => computeRange(sq, [-9, -8, -7, -1, 1, 7, 8, 9]));\nconst KNIGHT_ATTACKS = tabulate(sq => computeRange(sq, [-17, -15, -10, -6, 6, 10, 15, 17]));\nconst PAWN_ATTACKS = {\n  white: tabulate(sq => computeRange(sq, [7, 9])),\n  black: tabulate(sq => computeRange(sq, [-7, -9])),\n};\n\n/**\n * Gets squares attacked or defended by a king on `square`.\n */\nexport const kingAttacks = (square: Square): SquareSet => KING_ATTACKS[square];\n\n/**\n * Gets squares attacked or defended by a knight on `square`.\n */\nexport const knightAttacks = (square: Square): SquareSet => KNIGHT_ATTACKS[square];\n\n/**\n * Gets squares attacked or defended by a pawn of the given `color`\n * on `square`.\n */\nexport const pawnAttacks = (color: Color, square: Square): SquareSet => PAWN_ATTACKS[color][square];\n\nconst FILE_RANGE = tabulate(sq => SquareSet.fromFile(squareFile(sq)).without(sq));\nconst RANK_RANGE = tabulate(sq => SquareSet.fromRank(squareRank(sq)).without(sq));\n\nconst DIAG_RANGE = tabulate(sq => {\n  const diag = new SquareSet(0x0804_0201, 0x8040_2010);\n  const shift = 8 * (squareRank(sq) - squareFile(sq));\n  return (shift >= 0 ? diag.shl64(shift) : diag.shr64(-shift)).without(sq);\n});\n\nconst ANTI_DIAG_RANGE = tabulate(sq => {\n  const diag = new SquareSet(0x1020_4080, 0x0102_0408);\n  const shift = 8 * (squareRank(sq) + squareFile(sq) - 7);\n  return (shift >= 0 ? diag.shl64(shift) : diag.shr64(-shift)).without(sq);\n});\n\nconst hyperbola = (bit: SquareSet, range: SquareSet, occupied: SquareSet): SquareSet => {\n  let forward = occupied.intersect(range);\n  let reverse = forward.bswap64(); // Assumes no more than 1 bit per rank\n  forward = forward.minus64(bit);\n  reverse = reverse.minus64(bit.bswap64());\n  return forward.xor(reverse.bswap64()).intersect(range);\n};\n\nconst fileAttacks = (square: Square, occupied: SquareSet): SquareSet =>\n  hyperbola(SquareSet.fromSquare(square), FILE_RANGE[square], occupied);\n\nconst rankAttacks = (square: Square, occupied: SquareSet): SquareSet => {\n  const range = RANK_RANGE[square];\n  let forward = occupied.intersect(range);\n  let reverse = forward.rbit64();\n  forward = forward.minus64(SquareSet.fromSquare(square));\n  reverse = reverse.minus64(SquareSet.fromSquare(63 - square));\n  return forward.xor(reverse.rbit64()).intersect(range);\n};\n\n/**\n * Gets squares attacked or defended by a bishop on `square`, given `occupied`\n * squares.\n */\nexport const bishopAttacks = (square: Square, occupied: SquareSet): SquareSet => {\n  const bit = SquareSet.fromSquare(square);\n  return hyperbola(bit, DIAG_RANGE[square], occupied).xor(hyperbola(bit, ANTI_DIAG_RANGE[square], occupied));\n};\n\n/**\n * Gets squares attacked or defended by a rook on `square`, given `occupied`\n * squares.\n */\nexport const rookAttacks = (square: Square, occupied: SquareSet): SquareSet =>\n  fileAttacks(square, occupied).xor(rankAttacks(square, occupied));\n\n/**\n * Gets squares attacked or defended by a queen on `square`, given `occupied`\n * squares.\n */\nexport const queenAttacks = (square: Square, occupied: SquareSet): SquareSet =>\n  bishopAttacks(square, occupied).xor(rookAttacks(square, occupied));\n\n/**\n * Gets squares attacked or defended by a `piece` on `square`, given\n * `occupied` squares.\n */\nexport const attacks = (piece: Piece, square: Square, occupied: SquareSet): SquareSet => {\n  switch (piece.role) {\n    case 'pawn':\n      return pawnAttacks(piece.color, square);\n    case 'knight':\n      return knightAttacks(square);\n    case 'bishop':\n      return bishopAttacks(square, occupied);\n    case 'rook':\n      return rookAttacks(square, occupied);\n    case 'queen':\n      return queenAttacks(square, occupied);\n    case 'king':\n      return kingAttacks(square);\n  }\n};\n\n/**\n * Gets all squares of the rank, file or diagonal with the two squares\n * `a` and `b`, or an empty set if they are not aligned.\n */\nexport const ray = (a: Square, b: Square): SquareSet => {\n  const other = SquareSet.fromSquare(b);\n  if (RANK_RANGE[a].intersects(other)) return RANK_RANGE[a].with(a);\n  if (ANTI_DIAG_RANGE[a].intersects(other)) return ANTI_DIAG_RANGE[a].with(a);\n  if (DIAG_RANGE[a].intersects(other)) return DIAG_RANGE[a].with(a);\n  if (FILE_RANGE[a].intersects(other)) return FILE_RANGE[a].with(a);\n  return SquareSet.empty();\n};\n\n/**\n * Gets all squares between `a` and `b` (bounds not included), or an empty set\n * if they are not on the same rank, file or diagonal.\n */\nexport const between = (a: Square, b: Square): SquareSet =>\n  ray(a, b)\n    .intersect(SquareSet.full().shl64(a).xor(SquareSet.full().shl64(b)))\n    .withoutFirst();\n"],
  "mappings": "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",
  "names": []
}
